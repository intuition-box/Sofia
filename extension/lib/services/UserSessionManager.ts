/**
 * UserSessionManager.ts
 *
 * Manages user identity and room generation based on wallet addresses.
 * Each wallet generates a unique, deterministic UUID for user identification.
 * Room IDs are generated by combining user UUID + agent ID.
 */

import { Storage } from "@plasmohq/storage"

const storage = new Storage()

// Global server ID (shared across all users)
const GLOBAL_SERVER_ID = "00000000-0000-0000-0000-000000000000"

/**
 * Simple hash function for strings (deterministic)
 */
async function simpleHash(str: string): Promise<string> {
  // Use Web Crypto API (available in browser)
  const encoder = new TextEncoder()
  const data = encoder.encode(str)
  const hashBuffer = await crypto.subtle.digest('SHA-256', data)
  const hashArray = Array.from(new Uint8Array(hashBuffer))
  const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('')
  return hashHex
}

/**
 * Generates a deterministic UUID v4 from any input string
 * Same input always produces the same UUID
 */
export async function generateDeterministicUUID(input: string): Promise<string> {
  // Create SHA-256 hash from input using Web Crypto API
  const hash = await simpleHash(input)

  // Format as UUID v4: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
  const uuid = [
    hash.substring(0, 8),
    hash.substring(8, 12),
    "4" + hash.substring(13, 16), // Version 4
    ((parseInt(hash.substring(16, 18), 16) & 0x3f) | 0x80).toString(16) + hash.substring(18, 20), // Variant bits
    hash.substring(20, 32)
  ].join("-")

  return uuid
}

/**
 * Gets the connected wallet address from storage
 * @throws Error if wallet is not connected
 */
export async function getWalletAddress(): Promise<string> {
  const walletAddress = await storage.get("metamask-account")

  if (!walletAddress) {
    throw new Error("Wallet non connect√© - Connexion requise pour utiliser SofIA")
  }

  return walletAddress
}

/**
 * Checks if a wallet is connected
 */
export async function isWalletConnected(): Promise<boolean> {
  try {
    const walletAddress = await storage.get("metamask-account")
    return !!walletAddress
  } catch (error) {
    return false
  }
}

/**
 * Generates a deterministic user UUID from wallet address
 * @returns User UUID (AUTHOR_ID)
 * @throws Error if wallet is not connected
 */
export async function getUserId(): Promise<string> {
  try {
    const walletAddress = await getWalletAddress()

    // Generate deterministic UUID from wallet address
    const userId = await generateDeterministicUUID(`user:${walletAddress.toLowerCase()}`)

    // Store mapping for debugging
    const mapping = await storage.get("user-wallet-mapping") || {}
    mapping[walletAddress] = userId
    await storage.set("user-wallet-mapping", mapping)

    return userId
  } catch (error) {
    console.error("‚ùå Error getting user ID:", error)
    throw error
  }
}

/**
 * Creates a deterministic room UUID from user ID + agent ID
 * @param userId User UUID (AUTHOR_ID)
 * @param agentId Agent UUID from constants.ts
 * @returns Room UUID
 */
export async function createUserAgentRoomId(userId: string, agentId: string): Promise<string> {
  // Combine user UUID + agent UUID to create unique room
  const roomInput = `room:${userId}:${agentId}`
  return await generateDeterministicUUID(roomInput)
}

/**
 * Interface for agent IDs configuration
 */
export interface AgentIds {
  AUTHOR_ID: string    // User UUID (from wallet)
  ROOM_ID: string      // Room UUID (hash of user + agent)
  CHANNEL_ID: string   // Same as ROOM_ID
  AGENT_ID: string     // Agent UUID (from constants.ts - UNCHANGED)
  SERVER_ID: string    // Global server ID
  AGENT_NAME: string   // Agent name for logging
}

/**
 * Generates complete agent IDs configuration for a user
 * @param agentName Name of the agent (for logging only)
 * @param baseAgentId Agent ID from constants.ts (MUST NOT CHANGE)
 * @returns Complete agent IDs object
 * @throws Error if wallet is not connected
 */
export async function getUserAgentIds(
  agentName: string,
  baseAgentId: string
): Promise<AgentIds> {
  try {
    // Get user UUID from wallet
    const userId = await getUserId()

    // Generate room UUID from user + agent
    const roomId = await createUserAgentRoomId(userId, baseAgentId)

    const agentIds: AgentIds = {
      AUTHOR_ID: userId,           // User UUID (dynamic)
      ROOM_ID: roomId,              // Room UUID (dynamic)
      CHANNEL_ID: roomId,           // Same as ROOM_ID
      AGENT_ID: baseAgentId,        // Agent UUID (UNCHANGED from constants.ts)
      SERVER_ID: GLOBAL_SERVER_ID,  // Global
      AGENT_NAME: agentName         // For logging
    }

    console.log(`üîë Generated IDs for ${agentName}:`, {
      wallet: await getWalletAddress(),
      userId: userId.substring(0, 8) + "...",
      roomId: roomId.substring(0, 8) + "...",
      agentId: baseAgentId.substring(0, 8) + "..."
    })

    return agentIds
  } catch (error) {
    console.error(`‚ùå Error generating IDs for ${agentName}:`, error)
    throw error
  }
}

/**
 * Gets the stored wallet-to-UUID mapping (for debugging)
 */
export async function getUserMapping(): Promise<Record<string, string>> {
  try {
    const mapping = await storage.get("user-wallet-mapping") || {}
    return mapping
  } catch (error) {
    console.error("‚ùå Error getting user mapping:", error)
    return {}
  }
}

/**
 * Resets the user session (for testing purposes)
 */
export async function resetUserSession(): Promise<void> {
  try {
    await storage.remove("user-wallet-mapping")
    console.log("‚úÖ User session reset")
  } catch (error) {
    console.error("‚ùå Error resetting user session:", error)
    throw error
  }
}

/**
 * Debug function to display current user session info
 */
export async function debugUserSession(): Promise<void> {
  try {
    const isConnected = await isWalletConnected()

    if (!isConnected) {
      console.log("‚ùå No wallet connected")
      return
    }

    const walletAddress = await getWalletAddress()
    const userId = await getUserId()
    const mapping = await getUserMapping()

    console.log("=== User Session Debug ===")
    console.log("Wallet Address:", walletAddress)
    console.log("User UUID:", userId)
    console.log("Stored Mapping:", mapping)
    console.log("========================")
  } catch (error) {
    console.error("‚ùå Error in debug:", error)
  }
}
