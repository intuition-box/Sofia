import {
  initializeChatbotSocket,
  initializeSofiaSocket,
  initializeThemeExtractorSocket,
  initializePulseSocket,
  initializeRecommendationSocket,
  initializeUserAgentIds
} from "./websocket";
import { loadDomainIntentions } from "./intentionRanking";
import { setupMessageHandlers } from "./messageHandlers";
import { MessageBus } from "../lib/services/MessageBus";
import { isWalletConnected } from "../lib/services/UserSessionManager";
import { Storage } from "@plasmohq/storage";
import "./oauth/index"; // Initialize OAuth service

const storage = new Storage();

// Initialize badge count on startup
async function initializeBadgeCount(): Promise<void> {
  try {
    MessageBus.getInstance().sendMessageFireAndForget({ type: 'INITIALIZE_BADGE' })
  } catch (error) {
    console.error('‚ùå [index.ts] Failed to initialize badge count:', error)
  }
}


async function init(): Promise<void> {
  console.log("üöÄ [index.ts] Starting extension initialization...")

  try {
    // 1Ô∏è‚É£ IMPORTANT : V√©rifier que le wallet est connect√©
    const walletAddress = await storage.get("metamask-account")
    if (!walletAddress) {
      console.warn("‚ö†Ô∏è [index.ts] Wallet non connect√© - Initialisation des agents report√©e")
      console.warn("‚ö†Ô∏è [index.ts] L'utilisateur doit connecter son wallet pour utiliser SofIA")
      // Setup message handlers anyway for UI to work
      setupMessageHandlers()
      await initializeBadgeCount()
      return
    }

    console.log("‚úÖ [index.ts] Wallet connect√©:", walletAddress)

    // 2Ô∏è‚É£ Initialiser les IDs utilisateur (DOIT √™tre fait en premier)
    console.log("üîë [index.ts] Initializing user agent IDs...")
    await initializeUserAgentIds()
    console.log("‚úÖ [index.ts] User agent IDs initialized")

    // 3Ô∏è‚É£ Charger les domaines d'intention
    console.log("üéØ [index.ts] Loading domain intentions...")
    await loadDomainIntentions()

    // 4Ô∏è‚É£ Initialiser les websockets (maintenant que les IDs sont pr√™ts)
    console.log("üìö [index.ts] Initializing SofIA socket...")
    await initializeSofiaSocket()
    console.log("ü§ñ [index.ts] Initializing Chatbot socket...")
    await initializeChatbotSocket()
    console.log("üé® [index.ts] Initializing ThemeExtractor socket...")
    await initializeThemeExtractorSocket()
    console.log("ü´Ä [index.ts] Initializing PulseAgent socket...")
    await initializePulseSocket()
    console.log("üíé [index.ts] Initializing RecommendationAgent socket...")
    await initializeRecommendationSocket()

    // 5Ô∏è‚É£ Setup message handlers
    console.log("üì® [index.ts] Setting up message handlers...")
    setupMessageHandlers()

    // 6Ô∏è‚É£ Initialize badge count
    console.log("üîî [index.ts] Initializing badge count...")
    await initializeBadgeCount()

    console.log("‚úÖ [index.ts] Extension initialization completed")

  } catch (error) {
    console.error("‚ùå [index.ts] Extension initialization failed:", error)
    console.error("‚ùå [index.ts] This may be due to missing wallet connection")
  }
}

// √âcouter les changements de wallet et r√©initialiser les connexions
chrome.storage.onChanged.addListener((changes, area) => {
  if (area === 'local' && changes['metamask-account']) {
    const newWallet = changes['metamask-account'].newValue
    const oldWallet = changes['metamask-account'].oldValue

    if (newWallet && newWallet !== oldWallet) {
      console.log("üîÑ [index.ts] Wallet changed, reinitializing connections...")
      // R√©initialiser l'extension avec le nouveau wallet
      init()
    }
  }
})

chrome.runtime.onMessage.addListener((message, sender) => {
  if (message.type === "open_sidepanel") {
    const tabId = sender.tab?.id
    const windowId = sender.tab?.windowId

    if (!tabId || !windowId) return

    chrome.sidePanel.open({ tabId, windowId })
  }
});

chrome.runtime.onInstalled.addListener(async () => {
  console.log("‚úÖ Tracking enabled - Extension ready");
});

chrome.action.onClicked.addListener(async (tab) => {
  if (tab.id) {
    await chrome.sidePanel.open({ tabId: tab.id });
  }
});

init();

console.log('üöÄ SOFIA Extension - Service Worker ready (Plasmo)');

export { };